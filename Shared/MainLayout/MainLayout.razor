@using WsBlazor.Shared.NavMenu
@using WsBlazor.Data.DTO
@using WsBlazor.Components.Login
@using System.Text.Json
@inject HttpClient httpClient
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject WsBlazor.Data.Services.UserApiService userApiService
@inject WsBlazor.Data.Services.ChatApiService chatApiService
@inherits LayoutComponentBase

<PageTitle>WsBlazor</PageTitle>

<div class="page">
	@if (User != null)
	{ 
		<div class="sidebar">
			<NavMenu User="User"/>
		</div>

		<main>
			<div class="top-row px-4">
				<EditForm class="user-search" Model="this" OnSubmit="@SearchUserHandler">
					<label class="user-search-label">
						<span>User to search</span>
						<InputText @bind-Value="SerchedUser"></InputText>
					</label>
					<button type="submit">Ok</button>
				</EditForm>
			</div>

			<article class="content px-4">
				@Body
			</article>
		</main>
	}
	else
	{
		<main>
			<Login OnLogin="@(e => LoginHandler(e))"></Login>
		</main>
	}
</div>

@code {
	private User? User { get; set; }
	private string SerchedUser {get; set;} = string.Empty;
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender) {
			var user = await localStorage.GetItemAsync<User>("user");
			if (user != null) {
				User = user;
				StateHasChanged();
			}
		}
	}
	private async Task SearchUserHandler() {
		
		var user = await userApiService.GetUserByName(SerchedUser);
		
		if (user != null && User != null) {	
			var userList = new List<NewChatWithUsersDto> {
				new NewChatWithUsersDto {
					UserId = user.Id,
				},
				new NewChatWithUsersDto {
					UserId = User.Id,
				},
			};
			var chat = await chatApiService.CheckAvailableChatByUsers(userList);
			
			if (chat != null) {
				
			}
		}

	}
	
	private async Task LoginHandler(string userName) {
		var data = await userApiService.GetUserByName(userName);

		if (data != null) {
			User = data;
			await localStorage.SetItemAsync("user", data);
		}
	}
}
